use crate::resp::{BulkString, CommandArgs};
use dtoa::Float;
use itoa::Integer;
use smallvec::SmallVec;
use std::{
    collections::{BTreeMap, BTreeSet, HashMap, HashSet},
    hash::BuildHasher,
};

/// Types compatible with command args
pub trait ToArgs {
    /// Write this Rust type as one ore multiple args into CommandArgs.
    ///
    /// Primitives Rust types will generate a single argument
    /// whereas collections and tuples will generate multiple arguments
    fn write_args(&self, args: &mut CommandArgs);

    /// Number arguments generated by this Rust type
    #[inline]
    fn num_args(&self) -> usize {
        1
    }
}

#[inline]
fn write_integer<I: Integer>(i: I, args: &mut CommandArgs) {
    let mut buf = itoa::Buffer::new();
    let str = buf.format(i);
    args.write_arg(str.as_bytes());
}

#[inline]
fn write_float<F: Float>(f: F, args: &mut CommandArgs) {
    let mut buf = dtoa::Buffer::new();
    let str = buf.format(f);
    args.write_arg(str.as_bytes());
}

impl ToArgs for i8 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for i16 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for u16 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for i32 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for u32 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for i64 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for u64 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for isize {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for usize {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_integer(*self, args);
    }
}

impl ToArgs for f32 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_float(*self, args);
    }
}

impl ToArgs for f64 {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        write_float(*self, args);
    }
}

impl ToArgs for bool {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(if *self { b"1" } else { b"0" });
    }
}

impl ToArgs for BulkString {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_bytes());
    }
}

impl ToArgs for Vec<u8> {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_slice());
    }
}

impl ToArgs for &[u8] {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self);
    }
}

impl<const N: usize> ToArgs for &[u8; N] {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_slice());
    }
}

impl<const N: usize> ToArgs for [u8; N] {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_slice());
    }
}

impl ToArgs for &str {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_bytes());
    }
}

impl ToArgs for String {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_bytes());
    }
}

impl ToArgs for &String {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        args.write_arg(self.as_bytes());
    }
}

impl ToArgs for char {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        let mut buf: [u8; 4] = [0; 4];
        self.encode_utf8(&mut buf);
        args.write_arg(buf.as_slice());
    }
}

impl<T: ToArgs> ToArgs for Option<T> {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        if let Some(t) = self {
            t.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        match self {
            Some(t) => t.num_args(),
            None => 0,
        }
    }
}

impl<T: ToArgs, const N: usize> ToArgs for [T; N] {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<T: ToArgs> ToArgs for Vec<T> {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<T: ToArgs> ToArgs for &[T] {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self.iter() {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<T, A> ToArgs for SmallVec<A>
where
    A: smallvec::Array<Item = T>,
    T: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<T, S: BuildHasher> ToArgs for HashSet<T, S>
where
    T: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<T> ToArgs for BTreeSet<T>
where
    T: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for e in self {
            e.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<K, V, S: BuildHasher> ToArgs for HashMap<K, V, S>
where
    K: ToArgs,
    V: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for (key, value) in self {
            key.write_args(args);
            value.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter()
            .fold(0, |acc, (k, v)| acc + k.num_args() + v.num_args())
    }
}

impl<K, V> ToArgs for BTreeMap<K, V>
where
    K: ToArgs,
    V: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for (key, value) in self {
            key.write_args(args);
            value.write_args(args);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.iter()
            .fold(0, |acc, (k, v)| acc + k.num_args() + v.num_args())
    }
}

impl<T, U> ToArgs for (T, U)
where
    T: ToArgs,
    U: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        self.0.write_args(args);
        self.1.write_args(args);
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.0.num_args() + self.1.num_args()
    }
}

impl<T, U, V> ToArgs for (T, U, V)
where
    T: ToArgs,
    U: ToArgs,
    V: ToArgs,
{
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        self.0.write_args(args);
        self.1.write_args(args);
        self.2.write_args(args);
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.0.num_args() + self.1.num_args() + self.2.num_args()
    }
}

impl ToArgs for CommandArgs {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for arg in self {
            args.write_arg(arg);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.len()
    }
}

impl ToArgs for &CommandArgs {
    #[inline]
    fn write_args(&self, args: &mut CommandArgs) {
        for arg in self.into_iter() {
            args.write_arg(arg);
        }
    }

    #[inline]
    fn num_args(&self) -> usize {
        self.len()
    }
}

/// Generic Marker for single arguments (no collections nor tuples)
pub trait SingleArg: ToArgs {}

impl SingleArg for i8 {}
impl SingleArg for u16 {}
impl SingleArg for i16 {}
impl SingleArg for u32 {}
impl SingleArg for i32 {}
impl SingleArg for u64 {}
impl SingleArg for i64 {}
impl SingleArg for usize {}
impl SingleArg for isize {}
impl SingleArg for f32 {}
impl SingleArg for f64 {}
impl SingleArg for bool {}
impl SingleArg for char {}
impl SingleArg for &str {}
impl SingleArg for String {}
impl SingleArg for &String {}
impl<const N: usize> SingleArg for &[u8; N] {}
impl<const N: usize> SingleArg for [u8; N] {}
impl SingleArg for &[u8] {}
impl SingleArg for Vec<u8> {}
impl SingleArg for BulkString {}
impl<T: SingleArg> SingleArg for Option<T> {}

/// Generic Marker for Collections of `ToArgs`
///
/// Each element of the collection can produce multiple args.
pub trait MultipleArgsCollection<T>: ToArgs
where
    T: ToArgs,
{
}

impl<T, const N: usize> MultipleArgsCollection<T> for [T; N] where T: ToArgs {}
impl<T> MultipleArgsCollection<T> for Vec<T> where T: ToArgs {}
impl<T> MultipleArgsCollection<T> for T where T: ToArgs {}

/// Marker for collections of single items of `ToArgs`
///
/// Each element of the collection can only produce a single arg.
pub trait SingleArgCollection<T>: ToArgs
where
    T: SingleArg,
{
}

impl SingleArgCollection<Vec<u8>> for CommandArgs {}

impl<T, const N: usize> SingleArgCollection<T> for [T; N] where T: SingleArg {}

impl<T> SingleArgCollection<T> for &[T] where T: SingleArg {}

impl<T> SingleArgCollection<T> for Vec<T> where T: SingleArg {}

impl<A, T> SingleArgCollection<T> for SmallVec<A>
where
    A: smallvec::Array<Item = T>,
    T: SingleArg,
{
}

impl<T, S: BuildHasher> SingleArgCollection<T> for HashSet<T, S> where T: SingleArg {}

impl<T> SingleArgCollection<T> for BTreeSet<T> where T: SingleArg {}

impl<T> SingleArgCollection<T> for T where T: SingleArg {}

/// A wrapper type that adapts any clonable iterator of `SingleArg` items to the `SingleArgCollection` and `ToArgs` traits.
///
/// # Purpose
///
/// `SingleArgIterator` allows you to use any iterator of items implementing `SingleArg` (such as produced by `.iter()` or more complex iterator adapters)
/// as a collection of arguments for Redis commands, without needing to collect your data into a concrete Vec or slice first.
/// This is particularly useful for building command arguments on-the-fly, avoiding unnecessary allocations.
///
/// # Requirements
///
/// - The underlying iterator must implement [`Clone`] so that it can be traversed twice:
///   - once for counting arguments (`num_args`)
///   - once for serializing them (`write_args`)
/// - The iterator's items must implement [`SingleArg`].
///
/// # Note
/// Most common iterators in Rust are clonable, including those produced by `.iter()`, `.cloned()`, `.map()`, and ranges.
/// If you use a non-clonable iterator, this wrapper will not compile.
pub struct SingleArgIterator<I>
where
    I: Iterator + Clone,
    I::Item: SingleArg,
{
    iter: I,
}

impl<I> SingleArgIterator<I>
where
    I: Iterator + Clone,
    I::Item: SingleArg,
{
    /// Constructs a new `SingleArgIterator` from any clonable iterator of `SingleArg` items.    
    pub fn new(iter: I) -> Self {
        SingleArgIterator { iter }
    }
}

/// Adapts any clonable iterator of `SingleArg` items to the `SingleArgCollection` and `ToArgs` traits.
impl<I> ToArgs for SingleArgIterator<I>
where
    I: Iterator + Clone,
    I::Item: SingleArg,
{
    fn write_args(&self, args: &mut CommandArgs) {
        for item in self.iter.clone() {
            item.write_args(args);
        }
    }
    fn num_args(&self) -> usize {
        self.iter.clone().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<I> SingleArgCollection<I::Item> for SingleArgIterator<I>
where
    I: Iterator + Clone,
    I::Item: SingleArg,
{
}

/// Convenience function for constructing a [`SingleArgIterator`] from any clonable iterator of `SingleArg` items.
pub fn single_arg_iter<T, I>(iter: I) -> SingleArgIterator<I>
where
    I: Iterator<Item = T> + Clone,
    T: SingleArg,
{
    SingleArgIterator::new(iter)
}

/// A wrapper type that adapts any clonable iterator of references to `SingleArg` items
/// to the `SingleArgCollection` and `ToArgs` traits.
///
/// # Purpose
///
/// `SingleArgRefIterator` allows you to use any clonable iterator over references to items implementing `SingleArg`
/// (such as produced by `.iter()` on a `Vec<T>` or slice) as a collection of arguments for Redis commands,
/// without needing to collect your data into a concrete Vec or slice first. This is especially useful for
/// passing arguments by reference, avoiding unnecessary cloning or allocation.
///
/// # Requirements
///
/// - The underlying iterator must be clonable ([`Clone`]), so it can be traversed twice:
///   - once for counting arguments (`num_args`)
///   - once for serializing them (`write_args`)
/// - The iterator's items must be references to a type implementing [`SingleArg`].
///
/// # Note
/// Most iterators produced by `.iter()` on collections are clonable.
/// If you use a non-clonable iterator, this wrapper will not compile.
///
/// # Lifetime
/// The lifetime parameter `'a` ensures that the iterator and the referenced items outlive
/// the usage of this wrapper.
pub struct SingleArgRefIterator<'a, I, T>
where
    I: Iterator<Item = &'a T> + Clone,
    T: SingleArg + 'a,
{
    iter: I,
}

impl<'a, I, T> SingleArgRefIterator<'a, I, T>
where
    I: Iterator<Item = &'a T> + Clone,
    T: SingleArg + 'a,
{
    /// Constructs a new `SingleArgRefIterator` from any clonable iterator of references to `SingleArg` items.
    pub fn new(iter: I) -> Self {
        SingleArgRefIterator { iter }
    }
}

/// Implements argument serialization and counting for an iterator of references to `SingleArg` items.
impl<'a, I, T> ToArgs for SingleArgRefIterator<'a, I, T>
where
    I: Iterator<Item = &'a T> + Clone,
    T: SingleArg + 'a,
{
    fn write_args(&self, args: &mut CommandArgs) {
        for item in self.iter.clone() {
            item.write_args(args);
        }
    }
    fn num_args(&self) -> usize {
        self.iter.clone().fold(0, |acc, t| acc + t.num_args())
    }
}

impl<'a, I, T> SingleArgCollection<T> for SingleArgRefIterator<'a, I, T>
where
    I: Iterator<Item = &'a T> + Clone,
    T: SingleArg + 'a,
{
}

/// Convenience function for constructing a [`SingleArgRefIterator`] from any clonable iterator of references to `SingleArg` items.
/// 
/// # Example
///
/// ```rust
/// use rustis::{
///     client::Client, commands::{FlushingMode, ServerCommands, GenericCommands},
///     resp::{cmd, single_arg_ref_iter, Value}, Result,
/// };
///
/// #[cfg_attr(feature = "tokio-runtime", tokio::main)]
/// #[cfg_attr(feature = "async-std-runtime", async_std::main)]
/// async fn main() -> Result<()> {
///     let client = Client::connect("127.0.0.1:6379").await?;
///     client.flushdb(FlushingMode::Sync).await?;
/// 
///     let keys = vec!["key1", "key2", "key3"];
///     client.del(single_arg_ref_iter(keys.iter())).await?;
/// 
///     Ok(())
/// }
/// ```
pub fn single_arg_ref_iter<'a, I, T>(iter: I) -> SingleArgRefIterator<'a, I, T>
where
    I: Iterator<Item = &'a T> + Clone,
    T: SingleArg + 'a,
{
    SingleArgRefIterator::new(iter)
}

/// Marker for key/value collections of Args
///
/// The key and the value can only produce a single arg each.
pub trait KeyValueArgsCollection<K, V>: ToArgs
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V> KeyValueArgsCollection<K, V> for Vec<(K, V)>
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<A, K, V> KeyValueArgsCollection<K, V> for SmallVec<A>
where
    A: smallvec::Array<Item = (K, V)>,
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V, const N: usize> KeyValueArgsCollection<K, V> for [(K, V); N]
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V> KeyValueArgsCollection<K, V> for &[(K, V)]
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V> KeyValueArgsCollection<K, V> for (K, V)
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V, S: BuildHasher> KeyValueArgsCollection<K, V> for HashMap<K, V, S>
where
    K: SingleArg,
    V: SingleArg,
{
}

impl<K, V> KeyValueArgsCollection<K, V> for BTreeMap<K, V>
where
    K: SingleArg,
    V: SingleArg,
{
}

/// A wrapper type that adapts any clonable iterator of `(K, V)` pairs (where both `K` and `V` implement `SingleArg`)
/// to the `KeyValueArgsCollection` and `ToArgs` traits.
///
/// # Purpose
///
/// `KeyValueArgsIterator` allows you to use any clonable iterator of key-value pairs as a collection of arguments
/// for Redis commands that expect pairs (such as `MSET`, `HSET`, etc.), without needing to collect your data
/// into a concrete Vec or slice first. This enables building argument lists on-the-fly and avoids unnecessary allocations.
///
/// # Requirements
///
/// - The underlying iterator must implement [`Clone`] so it can be traversed twice:
///   - once for counting arguments (`num_args`)
///   - once for serializing them (`write_args`)
/// - Both key and value types must implement [`SingleArg`].
/// 
/// # Note
/// Most iterators in Rust are clonable, including those produced by `.iter()`, `.cloned()`, `.map()`, and `.zip()`.
/// If you use a non-clonable iterator, this wrapper will not compile.
pub struct KeyValueArgsIterator<I, K, V>
where
    I: Iterator<Item = (K, V)> + Clone,
    K: SingleArg,
    V: SingleArg,
{
    iter: I,
}

impl<I, K, V> KeyValueArgsIterator<I, K, V>
where
    I: Iterator<Item = (K, V)> + Clone,
    K: SingleArg,
    V: SingleArg,
{
    /// Constructs a new `KeyValueArgsIterator` from any clonable iterator of `(K, V)` pairs.
    pub fn new(iter: I) -> Self {
        KeyValueArgsIterator { iter }
    }
}

/// Implements argument serialization and counting for an iterator of `(K, V)` pairs.
impl<I, K, V> ToArgs for KeyValueArgsIterator<I, K, V>
where
    I: Iterator<Item = (K, V)> + Clone,
    K: SingleArg,
    V: SingleArg,
{
    fn write_args(&self, args: &mut CommandArgs) {
        for (key, value) in self.iter.clone() {
            key.write_args(args);
            value.write_args(args);
        }
    }
    fn num_args(&self) -> usize {
        self.iter
            .clone()
            .fold(0, |acc, (k, v)| acc + k.num_args() + v.num_args())
    }
}

impl<I, K, V> KeyValueArgsCollection<K, V> for KeyValueArgsIterator<I, K, V>
where
    I: Iterator<Item = (K, V)> + Clone,
    K: SingleArg,
    V: SingleArg,
{
}

/// Convenience function for constructing a [`KeyValueArgsIterator`] from any clonable iterator of `(K, V)` pairs.
pub fn key_value_args_iter<I, K, V>(iter: I) -> KeyValueArgsIterator<I, K, V>
where
    I: Iterator<Item = (K, V)> + Clone,
    K: SingleArg,
    V: SingleArg,
{
    KeyValueArgsIterator::new(iter)
}

/// A wrapper type that adapts any clonable iterator of references to `(K, V)` pairs (where both `K` and `V` implement `SingleArg`)
/// to the `KeyValueArgsCollection` and `ToArgs` traits.
///
/// # Purpose
///
/// `KeyValueArgsRefIterator` allows you to use any clonable iterator over references to key-value pairs
/// (such as produced by `.iter()` on a slice or a `Vec<(K, V)>`) as a collection of arguments for Redis commands that expect pairs,
/// like `MSET`, `HSET`, etc. This avoids unnecessary cloning or allocation and enables efficient argument passing by reference.
///
/// # Requirements
///
/// - The underlying iterator must implement [`Clone`] so it can be traversed twice:
///   - once for counting arguments (`num_args`)
///   - once for serializing them (`write_args`)
/// - The iterator's items must be references to tuples where both key and value types implement [`SingleArg`].
///
/// # Examples
///
/// ```rust
/// use rustis::{
///     client::Client, commands::{FlushingMode, ServerCommands, StringCommands},
///     resp::{cmd, key_value_args_ref_iter, Value}, Result,
/// };
///
/// #[cfg_attr(feature = "tokio-runtime", tokio::main)]
/// #[cfg_attr(feature = "async-std-runtime", async_std::main)]
/// async fn main() -> Result<()> {
///     let client = Client::connect("127.0.0.1:6379").await?;
///     client.flushdb(FlushingMode::Sync).await?;
///
///     let map = vec![("foo", 1), ("bar", 2)];
///     client.mset(key_value_args_ref_iter(map.iter())).await?;
/// 
///     Ok(())
/// }
/// ```
///
/// This also works with arrays and slices:
///
/// ```rust
/// use rustis::{
///     client::Client, commands::{FlushingMode, ServerCommands, StringCommands},
///     resp::{cmd, key_value_args_ref_iter, Value}, Result,
/// };
///
/// #[cfg_attr(feature = "tokio-runtime", tokio::main)]
/// #[cfg_attr(feature = "async-std-runtime", async_std::main)]
/// async fn main() -> Result<()> {
///     let client = Client::connect("127.0.0.1:6379").await?;
///     client.flushdb(FlushingMode::Sync).await?;
/// 
///     let arr = [("a", 42), ("b", 43)];
///     client.mset(key_value_args_ref_iter(arr.iter())).await?;
/// 
///     Ok(())
/// }
/// ```
///
/// # Note
/// Most iterators produced by `.iter()` on collections or slices are clonable.  
/// If you use a non-clonable iterator, this wrapper will not compile.
///
/// # Lifetime
/// The lifetime parameter `'a` ensures that the iterator and the referenced pairs outlive
/// the usage of this wrapper.
///
pub struct KeyValueArgsRefIterator<'a, I, K, V>
where
    I: Iterator<Item = &'a (K, V)> + Clone,
    K: SingleArg + 'a,
    V: SingleArg + 'a,
{
    iter: I,
}

impl<'a, I, K, V> KeyValueArgsRefIterator<'a, I, K, V>
where
    I: Iterator<Item = &'a (K, V)> + Clone,
    K: SingleArg + 'a,
    V: SingleArg + 'a,
{
    /// Constructs a new `KeyValueArgsRefIterator` from any clonable iterator of references to `(K, V)` pairs.    
    pub fn new(iter: I) -> Self {
        KeyValueArgsRefIterator { iter }
    }
}

/// Implements argument serialization and counting for an iterator of references to `(K, V)` pairs.
impl<'a, I, K, V> ToArgs for KeyValueArgsRefIterator<'a, I, K, V>
where
    I: Iterator<Item = &'a (K, V)> + Clone,
    K: SingleArg + 'a,
    V: SingleArg + 'a,
{
    fn write_args(&self, args: &mut CommandArgs) {
        for (key, value) in self.iter.clone() {
            key.write_args(args);
            value.write_args(args);
        }
    }
    fn num_args(&self) -> usize {
        self.iter
            .clone()
            .fold(0, |acc, (k, v)| acc + k.num_args() + v.num_args())
    }
}

/// Marks this wrapper as a `KeyValueArgsCollection` for the referenced key and value types.
impl<'a, I, K, V> KeyValueArgsCollection<K, V> for KeyValueArgsRefIterator<'a, I, K, V>
where
    I: Iterator<Item = &'a (K, V)> + Clone,
    K: SingleArg + 'a,
    V: SingleArg + 'a,
{
}

/// Convenience function for constructing a [`KeyValueArgsRefIterator`] from any clonable iterator of references to `(K, V)` pairs.
/// 
/// # Example
///
/// ```rust
/// use rustis::{
///     client::Client, commands::{FlushingMode, ServerCommands, StringCommands},
///     resp::{cmd, key_value_args_ref_iter, Value}, Result,
/// };
///
/// #[cfg_attr(feature = "tokio-runtime", tokio::main)]
/// #[cfg_attr(feature = "async-std-runtime", async_std::main)]
/// async fn main() -> Result<()> {
///     let client = Client::connect("127.0.0.1:6379").await?;
///     client.flushdb(FlushingMode::Sync).await?;
///
///     let map = vec![("foo", 1), ("bar", 2)];
///     client.mset(key_value_args_ref_iter(map.iter())).await?;
/// 
///     Ok(())
/// }
/// ```
pub fn key_value_args_ref_iter<'a, I, K, V>(iter: I) -> KeyValueArgsRefIterator<'a, I, K, V>
where
    I: Iterator<Item = &'a (K, V)> + Clone,
    K: SingleArg + 'a,
    V: SingleArg + 'a,
{
    KeyValueArgsRefIterator::new(iter)
}
